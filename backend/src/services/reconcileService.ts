import { PaymentService } from './paymentService';
import cron from 'node-cron';

export class ReconcileService {
  private static isRunning = false;

  /**
   * Inicia o servi√ßo de reconcilia√ß√£o
   */
  static start(): void {
    console.log('üîÑ [RECONCILE-SERVICE] Iniciando servi√ßo de reconcilia√ß√£o');

    // Executar a cada 5 minutos
    cron.schedule('*/5 * * * *', async () => {
      await this.reconcilePending();
    });

    // Executar imediatamente na inicializa√ß√£o
    setTimeout(() => {
      this.reconcilePending();
    }, 10000); // 10 segundos ap√≥s inicializa√ß√£o

    console.log('‚úÖ [RECONCILE-SERVICE] Servi√ßo de reconcilia√ß√£o iniciado');
  }

  /**
   * Reconcilia pagamentos pendentes
   */
  static async reconcilePending(): Promise<void> {
    if (this.isRunning) {
      console.log('‚è≥ [RECONCILE-SERVICE] Reconcilia√ß√£o j√° em execu√ß√£o, pulando...');
      return;
    }

    this.isRunning = true;
    console.log('üîÑ [RECONCILE-SERVICE] Iniciando reconcilia√ß√£o de pagamentos pendentes...');

    try {
      // Buscar todos os pagamentos pendentes
      const pendingPayments = await PaymentService.getPendingPayments();
      console.log(`üîç [RECONCILE-SERVICE] Encontrados ${pendingPayments.length} pagamentos pendentes`);

      let reconciledCount = 0;
      let expiredCount = 0;

      for (const record of pendingPayments) {
        try {
          console.log(`üîç [RECONCILE-SERVICE] Verificando pagamento: ${record.preference_id}`);

          // Buscar pagamentos aprovados via API do Mercado Pago
          const approvedPayment = await PaymentService.searchApprovedPayments(
            record.external_reference,
            record.owner_id
          );

          if (approvedPayment) {
            console.log(`‚úÖ [RECONCILE-SERVICE] Pagamento aprovado encontrado: ${approvedPayment.id}`);
            
            // Confirmar agendamento
            const confirmed = await PaymentService.confirmBooking(record.booking_id, approvedPayment);
            
            if (confirmed) {
              reconciledCount++;
              console.log(`‚úÖ [RECONCILE-SERVICE] Agendamento confirmado: ${record.booking_id}`);
            } else {
              console.log(`‚ö†Ô∏è [RECONCILE-SERVICE] Erro ao confirmar agendamento: ${record.booking_id}`);
            }
          } else {
            // Verificar se o pagamento expirou
            const now = new Date();
            const expiresAt = new Date(record.expires_at);
            
            if (now > expiresAt) {
              console.log(`‚è∞ [RECONCILE-SERVICE] Pagamento expirado: ${record.preference_id}`);
              
              // Atualizar status para expirado
              await PaymentService.updatePaymentRecordStatus(record.booking_id, 'expired');
              expiredCount++;
            }
          }
        } catch (error) {
          console.error(`‚ùå [RECONCILE-SERVICE] Erro ao processar pagamento ${record.preference_id}:`, error);
        }
      }

      console.log(`üéâ [RECONCILE-SERVICE] Reconcilia√ß√£o conclu√≠da:`);
      console.log(`   - Pagamentos reconciliados: ${reconciliedCount}`);
      console.log(`   - Pagamentos expirados: ${expiredCount}`);
      console.log(`   - Total processados: ${pendingPayments.length}`);

    } catch (error) {
      console.error('‚ùå [RECONCILE-SERVICE] Erro durante reconcilia√ß√£o:', error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Executa reconcilia√ß√£o manual (para testes ou execu√ß√£o sob demanda)
   */
  static async runManualReconcile(): Promise<{ reconciled: number; expired: number; total: number }> {
    console.log('üîÑ [RECONCILE-SERVICE] Executando reconcilia√ß√£o manual...');

    const pendingPayments = await PaymentService.getPendingPayments();
    let reconciledCount = 0;
    let expiredCount = 0;

    for (const record of pendingPayments) {
      try {
        const approvedPayment = await PaymentService.searchApprovedPayments(
          record.external_reference,
          record.owner_id
        );

        if (approvedPayment) {
          const confirmed = await PaymentService.confirmBooking(record.booking_id, approvedPayment);
          if (confirmed) {
            reconciledCount++;
          }
        } else {
          const now = new Date();
          const expiresAt = new Date(record.expires_at);
          
          if (now > expiresAt) {
            await PaymentService.updatePaymentRecordStatus(record.booking_id, 'expired');
            expiredCount++;
          }
        }
      } catch (error) {
        console.error(`‚ùå [RECONCILE-SERVICE] Erro ao processar ${record.preference_id}:`, error);
      }
    }

    return {
      reconciled: reconciledCount,
      expired: expiredCount,
      total: pendingPayments.length
    };
  }

  /**
   * Para o servi√ßo de reconcilia√ß√£o
   */
  static stop(): void {
    console.log('üõë [RECONCILE-SERVICE] Parando servi√ßo de reconcilia√ß√£o');
    // O cron job ser√° parado automaticamente quando o processo terminar
  }
}
