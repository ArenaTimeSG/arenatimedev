// Script de teste espec√≠fico para o modal de agendamento
// Execute este c√≥digo no console do navegador quando estiver no dashboard

console.log('üîç Teste espec√≠fico do modal de agendamento...');

// Fun√ß√£o para simular clique em uma c√©lula do calend√°rio
const simulateCellClick = () => {
  console.log('üñ±Ô∏è Simulando clique em c√©lula do calend√°rio...');
  
  // Procurar por uma c√©lula clic√°vel no calend√°rio
  const cells = document.querySelectorAll('[data-testid="calendar-cell"], .calendar-cell, .time-slot');
  console.log('C√©lulas encontradas:', cells.length);
  
  if (cells.length > 0) {
    const firstCell = cells[0];
    console.log('Clicando na primeira c√©lula:', firstCell);
    firstCell.click();
    
    // Verificar se o modal abriu
    setTimeout(() => {
      const modal = document.querySelector('[role="dialog"]');
      console.log('Modal aberto ap√≥s clique:', modal ? '‚úÖ' : '‚ùå');
      
      if (modal) {
        // Verificar se o ClientSearchDropdown est√° presente
        const clientDropdown = modal.querySelector('input[placeholder*="buscar"]');
        console.log('ClientSearchDropdown encontrado:', clientDropdown ? '‚úÖ' : '‚ùå');
        
        if (clientDropdown) {
          // Simular digita√ß√£o no campo de busca
          clientDropdown.focus();
          clientDropdown.value = 'teste';
          clientDropdown.dispatchEvent(new Event('input', { bubbles: true }));
          
          // Verificar se o bot√£o "Adicionar Cliente" aparece
          setTimeout(() => {
            const addButton = modal.querySelector('button:contains("Adicionar Cliente")');
            console.log('Bot√£o "Adicionar Cliente" encontrado:', addButton ? '‚úÖ' : '‚ùå');
            
            if (addButton) {
              console.log('üñ±Ô∏è Clicando no bot√£o "Adicionar Cliente"...');
              addButton.click();
              
              // Verificar se o AddClientModal abriu
              setTimeout(() => {
                const addClientModal = document.querySelector('[role="dialog"]:last-child');
                console.log('AddClientModal aberto:', addClientModal ? '‚úÖ' : '‚ùå');
                
                if (addClientModal) {
                  // Verificar se os campos est√£o presentes
                  const nameField = addClientModal.querySelector('input[type="text"]');
                  const emailField = addClientModal.querySelector('input[type="email"]');
                  const phoneField = addClientModal.querySelector('input[type="tel"]');
                  
                  console.log('Campo Nome:', nameField ? '‚úÖ' : '‚ùå');
                  console.log('Campo Email:', emailField ? '‚úÖ' : '‚ùå');
                  console.log('Campo Telefone:', phoneField ? '‚úÖ' : '‚ùå');
                  
                  // Testar preenchimento e submiss√£o
                  if (nameField && emailField) {
                    console.log('üìù Testando preenchimento do formul√°rio...');
                    nameField.value = 'Cliente Teste Modal';
                    emailField.value = 'teste@modal.com';
                    
                    // Disparar eventos de input
                    nameField.dispatchEvent(new Event('input', { bubbles: true }));
                    emailField.dispatchEvent(new Event('input', { bubbles: true }));
                    
                    // Procurar bot√£o de submit
                    const submitButton = addClientModal.querySelector('button[type="submit"]');
                    console.log('Bot√£o Submit encontrado:', submitButton ? '‚úÖ' : '‚ùå');
                    
                    if (submitButton) {
                      console.log('üöÄ Testando submiss√£o do formul√°rio...');
                      submitButton.click();
                    }
                  }
                }
              }, 1000);
            }
          }, 500);
        }
      }
    }, 500);
  } else {
    console.log('‚ùå Nenhuma c√©lula clic√°vel encontrada');
  }
};

// Executar teste
simulateCellClick();
